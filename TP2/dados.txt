%%LEX
%literals="+-/*=()"  ##isto sao literals
%ignore=" \n\t" ##isto sao ignores
%tokens=['VAR','NUMBER']    ##mais um comentario pros tokens
%er
[a-zA-Z_][a-zA-Z0-9_]* return('VAR', t.value);	##oiiiiii
\d+(\.\d+)? return('NUMBER', float(t.value));	##ppppppp
. error(f"Illegal character '{t.value[0]}', [{t.lexer.lineno}]",t.lexer.skip(1),f"hello");	##oqoqoqoqoqoqo

%%YACC

%precedence = [
    ('left','+','-'),
    ('left','*','/'),
    ('right','UMINUS'),
]	##pooosososo

%symboltable
ts = {}	##oorororororroor
a = 3	##papaasllslsal√ßa

%symboltablend
%grammar
stat : VAR '=' exp	{ ts[p[1]] = p[3] }
stat : exp	{ print(p[1]) } ##opepepepepepe
exp : exp '+' exp	{ p[0] = p[1] + p[3] }
exp : exp '-' exp	{ p[0] = p[1] - p[3] } 
exp : exp '*' exp	{ p[0] = p[1] * p[3] }  ##portoooooooooo
exp : exp '/' exp	{ p[0] = p[1] / p[3] }
exp : '-' exp %prec UMINUS	{ p[0] = -p[2] }    ##oizes
exp : '(' exp ')' 	{ p[0] = p[2] }
exp : NUMBER	{ p[0] = p[1] }
exp : VAR	{ p[0] = getval(p[1]) }

%%

def p_error(t):         ## HELLO
	print(f"Syntax error at '{t.value}', [{t.lexer.lineno}]")

def getval(n):
	if n not in ts: print(f"Undefined name '{n}'")
	return ts.get(n,0)

y=yacc()	##papapspls
y.parse("3+4*7")	#palslalspas
