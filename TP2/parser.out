Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    colon
    quote

Grammar

Rule 0     S' -> Z
Rule 1     Z -> GRAMMAR
Rule 2     GRAMMAR -> GRAMMAR LEX
Rule 3     GRAMMAR -> GRAMMAR YACC
Rule 4     GRAMMAR -> GRAMMAR python
Rule 5     GRAMMAR -> <empty>
Rule 6     LEX -> lex LEXES
Rule 7     LEXES -> literals equal listliterals LEXES
Rule 8     LEXES -> tokens equal oBracket LISTTOKENS cBracket LEXES
Rule 9     LISTTOKENS -> prime token prime CONTLISTTOKENS
Rule 10    CONTLISTTOKENS -> comma prime token prime CONTLISTTOKENS
Rule 11    CONTLISTTOKENS -> <empty>
Rule 12    LEXES -> ignor equal listignore LEXES
Rule 13    LEXES -> er LISTEXPDEFS LEXES
Rule 14    LISTEXPDEFS -> expReg expDef LISTEXPDEFS
Rule 15    LISTEXPDEFS -> <empty>
Rule 16    LEXES -> <empty>
Rule 17    YACC -> yacc YACCS
Rule 18    YACCS -> precedence equal listprecedence YACCS
Rule 19    YACCS -> initParserVal LISTVALUES YACCS
Rule 20    LISTVALUES -> parserVal LISTVALUES
Rule 21    LISTVALUES -> endParserVal
Rule 22    YACCS -> grammar LISTGRAM YACCS
Rule 23    LISTGRAM -> grammarDef funcGrammar LISTGRAM
Rule 24    LISTGRAM -> <empty>
Rule 25    YACCS -> <empty>

Terminals, with rules where they appear

cBracket             : 8
colon                : 
comma                : 10
endParserVal         : 21
equal                : 7 8 12 18
er                   : 13
error                : 
expDef               : 14
expReg               : 14
funcGrammar          : 23
grammar              : 22
grammarDef           : 23
ignor                : 12
initParserVal        : 19
lex                  : 6
listignore           : 12
listliterals         : 7
listprecedence       : 18
literals             : 7
oBracket             : 8
parserVal            : 20
precedence           : 18
prime                : 9 9 10 10
python               : 4
quote                : 
token                : 9 10
tokens               : 8
yacc                 : 17

Nonterminals, with rules where they appear

CONTLISTTOKENS       : 9 10
GRAMMAR              : 1 2 3 4
LEX                  : 2
LEXES                : 6 7 8 12 13
LISTEXPDEFS          : 13 14
LISTGRAM             : 22 23
LISTTOKENS           : 8
LISTVALUES           : 19 20
YACC                 : 3
YACCS                : 17 18 19 22
Z                    : 0

Parsing method: LALR

state 0

    (0) S' -> . Z
    (1) Z -> . GRAMMAR
    (2) GRAMMAR -> . GRAMMAR LEX
    (3) GRAMMAR -> . GRAMMAR YACC
    (4) GRAMMAR -> . GRAMMAR python
    (5) GRAMMAR -> .

    python          reduce using rule 5 (GRAMMAR -> .)
    lex             reduce using rule 5 (GRAMMAR -> .)
    yacc            reduce using rule 5 (GRAMMAR -> .)
    $end            reduce using rule 5 (GRAMMAR -> .)

    Z                              shift and go to state 1
    GRAMMAR                        shift and go to state 2

state 1

    (0) S' -> Z .



state 2

    (1) Z -> GRAMMAR .
    (2) GRAMMAR -> GRAMMAR . LEX
    (3) GRAMMAR -> GRAMMAR . YACC
    (4) GRAMMAR -> GRAMMAR . python
    (6) LEX -> . lex LEXES
    (17) YACC -> . yacc YACCS

    $end            reduce using rule 1 (Z -> GRAMMAR .)
    python          shift and go to state 5
    lex             shift and go to state 6
    yacc            shift and go to state 7

    LEX                            shift and go to state 3
    YACC                           shift and go to state 4

state 3

    (2) GRAMMAR -> GRAMMAR LEX .

    python          reduce using rule 2 (GRAMMAR -> GRAMMAR LEX .)
    lex             reduce using rule 2 (GRAMMAR -> GRAMMAR LEX .)
    yacc            reduce using rule 2 (GRAMMAR -> GRAMMAR LEX .)
    $end            reduce using rule 2 (GRAMMAR -> GRAMMAR LEX .)


state 4

    (3) GRAMMAR -> GRAMMAR YACC .

    python          reduce using rule 3 (GRAMMAR -> GRAMMAR YACC .)
    lex             reduce using rule 3 (GRAMMAR -> GRAMMAR YACC .)
    yacc            reduce using rule 3 (GRAMMAR -> GRAMMAR YACC .)
    $end            reduce using rule 3 (GRAMMAR -> GRAMMAR YACC .)


state 5

    (4) GRAMMAR -> GRAMMAR python .

    python          reduce using rule 4 (GRAMMAR -> GRAMMAR python .)
    lex             reduce using rule 4 (GRAMMAR -> GRAMMAR python .)
    yacc            reduce using rule 4 (GRAMMAR -> GRAMMAR python .)
    $end            reduce using rule 4 (GRAMMAR -> GRAMMAR python .)


state 6

    (6) LEX -> lex . LEXES
    (7) LEXES -> . literals equal listliterals LEXES
    (8) LEXES -> . tokens equal oBracket LISTTOKENS cBracket LEXES
    (12) LEXES -> . ignor equal listignore LEXES
    (13) LEXES -> . er LISTEXPDEFS LEXES
    (16) LEXES -> .

    literals        shift and go to state 9
    tokens          shift and go to state 10
    ignor           shift and go to state 11
    er              shift and go to state 12
    python          reduce using rule 16 (LEXES -> .)
    lex             reduce using rule 16 (LEXES -> .)
    yacc            reduce using rule 16 (LEXES -> .)
    $end            reduce using rule 16 (LEXES -> .)

    LEXES                          shift and go to state 8

state 7

    (17) YACC -> yacc . YACCS
    (18) YACCS -> . precedence equal listprecedence YACCS
    (19) YACCS -> . initParserVal LISTVALUES YACCS
    (22) YACCS -> . grammar LISTGRAM YACCS
    (25) YACCS -> .

    precedence      shift and go to state 14
    initParserVal   shift and go to state 15
    grammar         shift and go to state 16
    python          reduce using rule 25 (YACCS -> .)
    lex             reduce using rule 25 (YACCS -> .)
    yacc            reduce using rule 25 (YACCS -> .)
    $end            reduce using rule 25 (YACCS -> .)

    YACCS                          shift and go to state 13

state 8

    (6) LEX -> lex LEXES .

    python          reduce using rule 6 (LEX -> lex LEXES .)
    lex             reduce using rule 6 (LEX -> lex LEXES .)
    yacc            reduce using rule 6 (LEX -> lex LEXES .)
    $end            reduce using rule 6 (LEX -> lex LEXES .)


state 9

    (7) LEXES -> literals . equal listliterals LEXES

    equal           shift and go to state 17


state 10

    (8) LEXES -> tokens . equal oBracket LISTTOKENS cBracket LEXES

    equal           shift and go to state 18


state 11

    (12) LEXES -> ignor . equal listignore LEXES

    equal           shift and go to state 19


state 12

    (13) LEXES -> er . LISTEXPDEFS LEXES
    (14) LISTEXPDEFS -> . expReg expDef LISTEXPDEFS
    (15) LISTEXPDEFS -> .

    expReg          shift and go to state 21
    literals        reduce using rule 15 (LISTEXPDEFS -> .)
    tokens          reduce using rule 15 (LISTEXPDEFS -> .)
    ignor           reduce using rule 15 (LISTEXPDEFS -> .)
    er              reduce using rule 15 (LISTEXPDEFS -> .)
    python          reduce using rule 15 (LISTEXPDEFS -> .)
    lex             reduce using rule 15 (LISTEXPDEFS -> .)
    yacc            reduce using rule 15 (LISTEXPDEFS -> .)
    $end            reduce using rule 15 (LISTEXPDEFS -> .)

    LISTEXPDEFS                    shift and go to state 20

state 13

    (17) YACC -> yacc YACCS .

    python          reduce using rule 17 (YACC -> yacc YACCS .)
    lex             reduce using rule 17 (YACC -> yacc YACCS .)
    yacc            reduce using rule 17 (YACC -> yacc YACCS .)
    $end            reduce using rule 17 (YACC -> yacc YACCS .)


state 14

    (18) YACCS -> precedence . equal listprecedence YACCS

    equal           shift and go to state 22


state 15

    (19) YACCS -> initParserVal . LISTVALUES YACCS
    (20) LISTVALUES -> . parserVal LISTVALUES
    (21) LISTVALUES -> . endParserVal

    parserVal       shift and go to state 24
    endParserVal    shift and go to state 25

    LISTVALUES                     shift and go to state 23

state 16

    (22) YACCS -> grammar . LISTGRAM YACCS
    (23) LISTGRAM -> . grammarDef funcGrammar LISTGRAM
    (24) LISTGRAM -> .

    grammarDef      shift and go to state 27
    precedence      reduce using rule 24 (LISTGRAM -> .)
    initParserVal   reduce using rule 24 (LISTGRAM -> .)
    grammar         reduce using rule 24 (LISTGRAM -> .)
    python          reduce using rule 24 (LISTGRAM -> .)
    lex             reduce using rule 24 (LISTGRAM -> .)
    yacc            reduce using rule 24 (LISTGRAM -> .)
    $end            reduce using rule 24 (LISTGRAM -> .)

    LISTGRAM                       shift and go to state 26

state 17

    (7) LEXES -> literals equal . listliterals LEXES

    listliterals    shift and go to state 28


state 18

    (8) LEXES -> tokens equal . oBracket LISTTOKENS cBracket LEXES

    oBracket        shift and go to state 29


state 19

    (12) LEXES -> ignor equal . listignore LEXES

    listignore      shift and go to state 30


state 20

    (13) LEXES -> er LISTEXPDEFS . LEXES
    (7) LEXES -> . literals equal listliterals LEXES
    (8) LEXES -> . tokens equal oBracket LISTTOKENS cBracket LEXES
    (12) LEXES -> . ignor equal listignore LEXES
    (13) LEXES -> . er LISTEXPDEFS LEXES
    (16) LEXES -> .

    literals        shift and go to state 9
    tokens          shift and go to state 10
    ignor           shift and go to state 11
    er              shift and go to state 12
    python          reduce using rule 16 (LEXES -> .)
    lex             reduce using rule 16 (LEXES -> .)
    yacc            reduce using rule 16 (LEXES -> .)
    $end            reduce using rule 16 (LEXES -> .)

    LEXES                          shift and go to state 31

state 21

    (14) LISTEXPDEFS -> expReg . expDef LISTEXPDEFS

    expDef          shift and go to state 32


state 22

    (18) YACCS -> precedence equal . listprecedence YACCS

    listprecedence  shift and go to state 33


state 23

    (19) YACCS -> initParserVal LISTVALUES . YACCS
    (18) YACCS -> . precedence equal listprecedence YACCS
    (19) YACCS -> . initParserVal LISTVALUES YACCS
    (22) YACCS -> . grammar LISTGRAM YACCS
    (25) YACCS -> .

    precedence      shift and go to state 14
    initParserVal   shift and go to state 15
    grammar         shift and go to state 16
    python          reduce using rule 25 (YACCS -> .)
    lex             reduce using rule 25 (YACCS -> .)
    yacc            reduce using rule 25 (YACCS -> .)
    $end            reduce using rule 25 (YACCS -> .)

    YACCS                          shift and go to state 34

state 24

    (20) LISTVALUES -> parserVal . LISTVALUES
    (20) LISTVALUES -> . parserVal LISTVALUES
    (21) LISTVALUES -> . endParserVal

    parserVal       shift and go to state 24
    endParserVal    shift and go to state 25

    LISTVALUES                     shift and go to state 35

state 25

    (21) LISTVALUES -> endParserVal .

    precedence      reduce using rule 21 (LISTVALUES -> endParserVal .)
    initParserVal   reduce using rule 21 (LISTVALUES -> endParserVal .)
    grammar         reduce using rule 21 (LISTVALUES -> endParserVal .)
    python          reduce using rule 21 (LISTVALUES -> endParserVal .)
    lex             reduce using rule 21 (LISTVALUES -> endParserVal .)
    yacc            reduce using rule 21 (LISTVALUES -> endParserVal .)
    $end            reduce using rule 21 (LISTVALUES -> endParserVal .)


state 26

    (22) YACCS -> grammar LISTGRAM . YACCS
    (18) YACCS -> . precedence equal listprecedence YACCS
    (19) YACCS -> . initParserVal LISTVALUES YACCS
    (22) YACCS -> . grammar LISTGRAM YACCS
    (25) YACCS -> .

    precedence      shift and go to state 14
    initParserVal   shift and go to state 15
    grammar         shift and go to state 16
    python          reduce using rule 25 (YACCS -> .)
    lex             reduce using rule 25 (YACCS -> .)
    yacc            reduce using rule 25 (YACCS -> .)
    $end            reduce using rule 25 (YACCS -> .)

    YACCS                          shift and go to state 36

state 27

    (23) LISTGRAM -> grammarDef . funcGrammar LISTGRAM

    funcGrammar     shift and go to state 37


state 28

    (7) LEXES -> literals equal listliterals . LEXES
    (7) LEXES -> . literals equal listliterals LEXES
    (8) LEXES -> . tokens equal oBracket LISTTOKENS cBracket LEXES
    (12) LEXES -> . ignor equal listignore LEXES
    (13) LEXES -> . er LISTEXPDEFS LEXES
    (16) LEXES -> .

    literals        shift and go to state 9
    tokens          shift and go to state 10
    ignor           shift and go to state 11
    er              shift and go to state 12
    python          reduce using rule 16 (LEXES -> .)
    lex             reduce using rule 16 (LEXES -> .)
    yacc            reduce using rule 16 (LEXES -> .)
    $end            reduce using rule 16 (LEXES -> .)

    LEXES                          shift and go to state 38

state 29

    (8) LEXES -> tokens equal oBracket . LISTTOKENS cBracket LEXES
    (9) LISTTOKENS -> . prime token prime CONTLISTTOKENS

    prime           shift and go to state 40

    LISTTOKENS                     shift and go to state 39

state 30

    (12) LEXES -> ignor equal listignore . LEXES
    (7) LEXES -> . literals equal listliterals LEXES
    (8) LEXES -> . tokens equal oBracket LISTTOKENS cBracket LEXES
    (12) LEXES -> . ignor equal listignore LEXES
    (13) LEXES -> . er LISTEXPDEFS LEXES
    (16) LEXES -> .

    literals        shift and go to state 9
    tokens          shift and go to state 10
    ignor           shift and go to state 11
    er              shift and go to state 12
    python          reduce using rule 16 (LEXES -> .)
    lex             reduce using rule 16 (LEXES -> .)
    yacc            reduce using rule 16 (LEXES -> .)
    $end            reduce using rule 16 (LEXES -> .)

    LEXES                          shift and go to state 41

state 31

    (13) LEXES -> er LISTEXPDEFS LEXES .

    python          reduce using rule 13 (LEXES -> er LISTEXPDEFS LEXES .)
    lex             reduce using rule 13 (LEXES -> er LISTEXPDEFS LEXES .)
    yacc            reduce using rule 13 (LEXES -> er LISTEXPDEFS LEXES .)
    $end            reduce using rule 13 (LEXES -> er LISTEXPDEFS LEXES .)


state 32

    (14) LISTEXPDEFS -> expReg expDef . LISTEXPDEFS
    (14) LISTEXPDEFS -> . expReg expDef LISTEXPDEFS
    (15) LISTEXPDEFS -> .

    expReg          shift and go to state 21
    literals        reduce using rule 15 (LISTEXPDEFS -> .)
    tokens          reduce using rule 15 (LISTEXPDEFS -> .)
    ignor           reduce using rule 15 (LISTEXPDEFS -> .)
    er              reduce using rule 15 (LISTEXPDEFS -> .)
    python          reduce using rule 15 (LISTEXPDEFS -> .)
    lex             reduce using rule 15 (LISTEXPDEFS -> .)
    yacc            reduce using rule 15 (LISTEXPDEFS -> .)
    $end            reduce using rule 15 (LISTEXPDEFS -> .)

    LISTEXPDEFS                    shift and go to state 42

state 33

    (18) YACCS -> precedence equal listprecedence . YACCS
    (18) YACCS -> . precedence equal listprecedence YACCS
    (19) YACCS -> . initParserVal LISTVALUES YACCS
    (22) YACCS -> . grammar LISTGRAM YACCS
    (25) YACCS -> .

    precedence      shift and go to state 14
    initParserVal   shift and go to state 15
    grammar         shift and go to state 16
    python          reduce using rule 25 (YACCS -> .)
    lex             reduce using rule 25 (YACCS -> .)
    yacc            reduce using rule 25 (YACCS -> .)
    $end            reduce using rule 25 (YACCS -> .)

    YACCS                          shift and go to state 43

state 34

    (19) YACCS -> initParserVal LISTVALUES YACCS .

    python          reduce using rule 19 (YACCS -> initParserVal LISTVALUES YACCS .)
    lex             reduce using rule 19 (YACCS -> initParserVal LISTVALUES YACCS .)
    yacc            reduce using rule 19 (YACCS -> initParserVal LISTVALUES YACCS .)
    $end            reduce using rule 19 (YACCS -> initParserVal LISTVALUES YACCS .)


state 35

    (20) LISTVALUES -> parserVal LISTVALUES .

    precedence      reduce using rule 20 (LISTVALUES -> parserVal LISTVALUES .)
    initParserVal   reduce using rule 20 (LISTVALUES -> parserVal LISTVALUES .)
    grammar         reduce using rule 20 (LISTVALUES -> parserVal LISTVALUES .)
    python          reduce using rule 20 (LISTVALUES -> parserVal LISTVALUES .)
    lex             reduce using rule 20 (LISTVALUES -> parserVal LISTVALUES .)
    yacc            reduce using rule 20 (LISTVALUES -> parserVal LISTVALUES .)
    $end            reduce using rule 20 (LISTVALUES -> parserVal LISTVALUES .)


state 36

    (22) YACCS -> grammar LISTGRAM YACCS .

    python          reduce using rule 22 (YACCS -> grammar LISTGRAM YACCS .)
    lex             reduce using rule 22 (YACCS -> grammar LISTGRAM YACCS .)
    yacc            reduce using rule 22 (YACCS -> grammar LISTGRAM YACCS .)
    $end            reduce using rule 22 (YACCS -> grammar LISTGRAM YACCS .)


state 37

    (23) LISTGRAM -> grammarDef funcGrammar . LISTGRAM
    (23) LISTGRAM -> . grammarDef funcGrammar LISTGRAM
    (24) LISTGRAM -> .

    grammarDef      shift and go to state 27
    precedence      reduce using rule 24 (LISTGRAM -> .)
    initParserVal   reduce using rule 24 (LISTGRAM -> .)
    grammar         reduce using rule 24 (LISTGRAM -> .)
    python          reduce using rule 24 (LISTGRAM -> .)
    lex             reduce using rule 24 (LISTGRAM -> .)
    yacc            reduce using rule 24 (LISTGRAM -> .)
    $end            reduce using rule 24 (LISTGRAM -> .)

    LISTGRAM                       shift and go to state 44

state 38

    (7) LEXES -> literals equal listliterals LEXES .

    python          reduce using rule 7 (LEXES -> literals equal listliterals LEXES .)
    lex             reduce using rule 7 (LEXES -> literals equal listliterals LEXES .)
    yacc            reduce using rule 7 (LEXES -> literals equal listliterals LEXES .)
    $end            reduce using rule 7 (LEXES -> literals equal listliterals LEXES .)


state 39

    (8) LEXES -> tokens equal oBracket LISTTOKENS . cBracket LEXES

    cBracket        shift and go to state 45


state 40

    (9) LISTTOKENS -> prime . token prime CONTLISTTOKENS

    token           shift and go to state 46


state 41

    (12) LEXES -> ignor equal listignore LEXES .

    python          reduce using rule 12 (LEXES -> ignor equal listignore LEXES .)
    lex             reduce using rule 12 (LEXES -> ignor equal listignore LEXES .)
    yacc            reduce using rule 12 (LEXES -> ignor equal listignore LEXES .)
    $end            reduce using rule 12 (LEXES -> ignor equal listignore LEXES .)


state 42

    (14) LISTEXPDEFS -> expReg expDef LISTEXPDEFS .

    literals        reduce using rule 14 (LISTEXPDEFS -> expReg expDef LISTEXPDEFS .)
    tokens          reduce using rule 14 (LISTEXPDEFS -> expReg expDef LISTEXPDEFS .)
    ignor           reduce using rule 14 (LISTEXPDEFS -> expReg expDef LISTEXPDEFS .)
    er              reduce using rule 14 (LISTEXPDEFS -> expReg expDef LISTEXPDEFS .)
    python          reduce using rule 14 (LISTEXPDEFS -> expReg expDef LISTEXPDEFS .)
    lex             reduce using rule 14 (LISTEXPDEFS -> expReg expDef LISTEXPDEFS .)
    yacc            reduce using rule 14 (LISTEXPDEFS -> expReg expDef LISTEXPDEFS .)
    $end            reduce using rule 14 (LISTEXPDEFS -> expReg expDef LISTEXPDEFS .)


state 43

    (18) YACCS -> precedence equal listprecedence YACCS .

    python          reduce using rule 18 (YACCS -> precedence equal listprecedence YACCS .)
    lex             reduce using rule 18 (YACCS -> precedence equal listprecedence YACCS .)
    yacc            reduce using rule 18 (YACCS -> precedence equal listprecedence YACCS .)
    $end            reduce using rule 18 (YACCS -> precedence equal listprecedence YACCS .)


state 44

    (23) LISTGRAM -> grammarDef funcGrammar LISTGRAM .

    precedence      reduce using rule 23 (LISTGRAM -> grammarDef funcGrammar LISTGRAM .)
    initParserVal   reduce using rule 23 (LISTGRAM -> grammarDef funcGrammar LISTGRAM .)
    grammar         reduce using rule 23 (LISTGRAM -> grammarDef funcGrammar LISTGRAM .)
    python          reduce using rule 23 (LISTGRAM -> grammarDef funcGrammar LISTGRAM .)
    lex             reduce using rule 23 (LISTGRAM -> grammarDef funcGrammar LISTGRAM .)
    yacc            reduce using rule 23 (LISTGRAM -> grammarDef funcGrammar LISTGRAM .)
    $end            reduce using rule 23 (LISTGRAM -> grammarDef funcGrammar LISTGRAM .)


state 45

    (8) LEXES -> tokens equal oBracket LISTTOKENS cBracket . LEXES
    (7) LEXES -> . literals equal listliterals LEXES
    (8) LEXES -> . tokens equal oBracket LISTTOKENS cBracket LEXES
    (12) LEXES -> . ignor equal listignore LEXES
    (13) LEXES -> . er LISTEXPDEFS LEXES
    (16) LEXES -> .

    literals        shift and go to state 9
    tokens          shift and go to state 10
    ignor           shift and go to state 11
    er              shift and go to state 12
    python          reduce using rule 16 (LEXES -> .)
    lex             reduce using rule 16 (LEXES -> .)
    yacc            reduce using rule 16 (LEXES -> .)
    $end            reduce using rule 16 (LEXES -> .)

    LEXES                          shift and go to state 47

state 46

    (9) LISTTOKENS -> prime token . prime CONTLISTTOKENS

    prime           shift and go to state 48


state 47

    (8) LEXES -> tokens equal oBracket LISTTOKENS cBracket LEXES .

    python          reduce using rule 8 (LEXES -> tokens equal oBracket LISTTOKENS cBracket LEXES .)
    lex             reduce using rule 8 (LEXES -> tokens equal oBracket LISTTOKENS cBracket LEXES .)
    yacc            reduce using rule 8 (LEXES -> tokens equal oBracket LISTTOKENS cBracket LEXES .)
    $end            reduce using rule 8 (LEXES -> tokens equal oBracket LISTTOKENS cBracket LEXES .)


state 48

    (9) LISTTOKENS -> prime token prime . CONTLISTTOKENS
    (10) CONTLISTTOKENS -> . comma prime token prime CONTLISTTOKENS
    (11) CONTLISTTOKENS -> .

    comma           shift and go to state 50
    cBracket        reduce using rule 11 (CONTLISTTOKENS -> .)

    CONTLISTTOKENS                 shift and go to state 49

state 49

    (9) LISTTOKENS -> prime token prime CONTLISTTOKENS .

    cBracket        reduce using rule 9 (LISTTOKENS -> prime token prime CONTLISTTOKENS .)


state 50

    (10) CONTLISTTOKENS -> comma . prime token prime CONTLISTTOKENS

    prime           shift and go to state 51


state 51

    (10) CONTLISTTOKENS -> comma prime . token prime CONTLISTTOKENS

    token           shift and go to state 52


state 52

    (10) CONTLISTTOKENS -> comma prime token . prime CONTLISTTOKENS

    prime           shift and go to state 53


state 53

    (10) CONTLISTTOKENS -> comma prime token prime . CONTLISTTOKENS
    (10) CONTLISTTOKENS -> . comma prime token prime CONTLISTTOKENS
    (11) CONTLISTTOKENS -> .

    comma           shift and go to state 50
    cBracket        reduce using rule 11 (CONTLISTTOKENS -> .)

    CONTLISTTOKENS                 shift and go to state 54

state 54

    (10) CONTLISTTOKENS -> comma prime token prime CONTLISTTOKENS .

    cBracket        reduce using rule 10 (CONTLISTTOKENS -> comma prime token prime CONTLISTTOKENS .)

