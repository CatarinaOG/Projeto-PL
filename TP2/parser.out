Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    colon
    quote

Grammar

Rule 0     S' -> Z
Rule 1     Z -> GRAMMAR
Rule 2     GRAMMAR -> GRAMMAR LEX
Rule 3     GRAMMAR -> GRAMMAR YACC
Rule 4     GRAMMAR -> GRAMMAR PYTHON
Rule 5     GRAMMAR -> <empty>
Rule 6     LEX -> lex LEXES
Rule 7     LEXES -> literals equal listliterals comment commentEnd LEXES
Rule 8     LEXES -> literals equal listliterals LEXES
Rule 9     LEXES -> tokens equal oBracket LISTTOKENS cBracket comment commentEnd LEXES
Rule 10    LEXES -> tokens equal oBracket LISTTOKENS cBracket LEXES
Rule 11    LISTTOKENS -> prime token prime CONTLISTTOKENS
Rule 12    CONTLISTTOKENS -> comma prime token prime CONTLISTTOKENS
Rule 13    CONTLISTTOKENS -> <empty>
Rule 14    LEXES -> ignor equal listignore comment commentEnd LEXES
Rule 15    LEXES -> ignor equal listignore LEXES
Rule 16    LEXES -> er LISTEXPDEFS LEXES
Rule 17    LISTEXPDEFS -> expReg expDef LISTEXPDEFS
Rule 18    LISTEXPDEFS -> expReg expDef comment commentEnd LISTEXPDEFS
Rule 19    LISTEXPDEFS -> <empty>
Rule 20    LEXES -> <empty>
Rule 21    YACC -> yacc YACCS
Rule 22    YACCS -> precedence equal listprecedence YACCS
Rule 23    YACCS -> precedence equal listprecedence comment commentEnd YACCS
Rule 24    YACCS -> initParserVal LISTVALUES YACCS
Rule 25    LISTVALUES -> parserVal LISTVALUES
Rule 26    LISTVALUES -> parserVal comment commentEnd LISTVALUES
Rule 27    LISTVALUES -> endParserVal
Rule 28    YACCS -> grammar LISTGRAM YACCS
Rule 29    LISTGRAM -> grammarDef funcGrammar comment commentEnd LISTGRAM
Rule 30    LISTGRAM -> grammarDef funcGrammar LISTGRAM
Rule 31    LISTGRAM -> <empty>
Rule 32    YACCS -> <empty>
Rule 33    PYTHON -> python PYTHONS
Rule 34    PYTHONS -> LISTFUNCS LISTOTHER
Rule 35    LISTFUNCS -> funcPython LISTFUNCS
Rule 36    LISTFUNCS -> <empty>
Rule 37    LISTOTHER -> otherPython LISTOTHER
Rule 38    LISTOTHER -> <empty>

Terminals, with rules where they appear

cBracket             : 9 10
colon                : 
comma                : 12
comment              : 7 9 14 18 23 26 29
commentEnd           : 7 9 14 18 23 26 29
endParserVal         : 27
equal                : 7 8 9 10 14 15 22 23
er                   : 16
error                : 
expDef               : 17 18
expReg               : 17 18
funcGrammar          : 29 30
funcPython           : 35
grammar              : 28
grammarDef           : 29 30
ignor                : 14 15
initParserVal        : 24
lex                  : 6
listignore           : 14 15
listliterals         : 7 8
listprecedence       : 22 23
literals             : 7 8
oBracket             : 9 10
otherPython          : 37
parserVal            : 25 26
precedence           : 22 23
prime                : 11 11 12 12
python               : 33
quote                : 
token                : 11 12
tokens               : 9 10
yacc                 : 21

Nonterminals, with rules where they appear

CONTLISTTOKENS       : 11 12
GRAMMAR              : 1 2 3 4
LEX                  : 2
LEXES                : 6 7 8 9 10 14 15 16
LISTEXPDEFS          : 16 17 18
LISTFUNCS            : 34 35
LISTGRAM             : 28 29 30
LISTOTHER            : 34 37
LISTTOKENS           : 9 10
LISTVALUES           : 24 25 26
PYTHON               : 4
PYTHONS              : 33
YACC                 : 3
YACCS                : 21 22 23 24 28
Z                    : 0

Parsing method: LALR

state 0

    (0) S' -> . Z
    (1) Z -> . GRAMMAR
    (2) GRAMMAR -> . GRAMMAR LEX
    (3) GRAMMAR -> . GRAMMAR YACC
    (4) GRAMMAR -> . GRAMMAR PYTHON
    (5) GRAMMAR -> .

    lex             reduce using rule 5 (GRAMMAR -> .)
    yacc            reduce using rule 5 (GRAMMAR -> .)
    python          reduce using rule 5 (GRAMMAR -> .)
    $end            reduce using rule 5 (GRAMMAR -> .)

    Z                              shift and go to state 1
    GRAMMAR                        shift and go to state 2

state 1

    (0) S' -> Z .



state 2

    (1) Z -> GRAMMAR .
    (2) GRAMMAR -> GRAMMAR . LEX
    (3) GRAMMAR -> GRAMMAR . YACC
    (4) GRAMMAR -> GRAMMAR . PYTHON
    (6) LEX -> . lex LEXES
    (21) YACC -> . yacc YACCS
    (33) PYTHON -> . python PYTHONS

    $end            reduce using rule 1 (Z -> GRAMMAR .)
    lex             shift and go to state 6
    yacc            shift and go to state 7
    python          shift and go to state 8

    LEX                            shift and go to state 3
    YACC                           shift and go to state 4
    PYTHON                         shift and go to state 5

state 3

    (2) GRAMMAR -> GRAMMAR LEX .

    lex             reduce using rule 2 (GRAMMAR -> GRAMMAR LEX .)
    yacc            reduce using rule 2 (GRAMMAR -> GRAMMAR LEX .)
    python          reduce using rule 2 (GRAMMAR -> GRAMMAR LEX .)
    $end            reduce using rule 2 (GRAMMAR -> GRAMMAR LEX .)


state 4

    (3) GRAMMAR -> GRAMMAR YACC .

    lex             reduce using rule 3 (GRAMMAR -> GRAMMAR YACC .)
    yacc            reduce using rule 3 (GRAMMAR -> GRAMMAR YACC .)
    python          reduce using rule 3 (GRAMMAR -> GRAMMAR YACC .)
    $end            reduce using rule 3 (GRAMMAR -> GRAMMAR YACC .)


state 5

    (4) GRAMMAR -> GRAMMAR PYTHON .

    lex             reduce using rule 4 (GRAMMAR -> GRAMMAR PYTHON .)
    yacc            reduce using rule 4 (GRAMMAR -> GRAMMAR PYTHON .)
    python          reduce using rule 4 (GRAMMAR -> GRAMMAR PYTHON .)
    $end            reduce using rule 4 (GRAMMAR -> GRAMMAR PYTHON .)


state 6

    (6) LEX -> lex . LEXES
    (7) LEXES -> . literals equal listliterals comment commentEnd LEXES
    (8) LEXES -> . literals equal listliterals LEXES
    (9) LEXES -> . tokens equal oBracket LISTTOKENS cBracket comment commentEnd LEXES
    (10) LEXES -> . tokens equal oBracket LISTTOKENS cBracket LEXES
    (14) LEXES -> . ignor equal listignore comment commentEnd LEXES
    (15) LEXES -> . ignor equal listignore LEXES
    (16) LEXES -> . er LISTEXPDEFS LEXES
    (20) LEXES -> .

    literals        shift and go to state 10
    tokens          shift and go to state 11
    ignor           shift and go to state 12
    er              shift and go to state 13
    lex             reduce using rule 20 (LEXES -> .)
    yacc            reduce using rule 20 (LEXES -> .)
    python          reduce using rule 20 (LEXES -> .)
    $end            reduce using rule 20 (LEXES -> .)

    LEXES                          shift and go to state 9

state 7

    (21) YACC -> yacc . YACCS
    (22) YACCS -> . precedence equal listprecedence YACCS
    (23) YACCS -> . precedence equal listprecedence comment commentEnd YACCS
    (24) YACCS -> . initParserVal LISTVALUES YACCS
    (28) YACCS -> . grammar LISTGRAM YACCS
    (32) YACCS -> .

    precedence      shift and go to state 15
    initParserVal   shift and go to state 16
    grammar         shift and go to state 17
    lex             reduce using rule 32 (YACCS -> .)
    yacc            reduce using rule 32 (YACCS -> .)
    python          reduce using rule 32 (YACCS -> .)
    $end            reduce using rule 32 (YACCS -> .)

    YACCS                          shift and go to state 14

state 8

    (33) PYTHON -> python . PYTHONS
    (34) PYTHONS -> . LISTFUNCS LISTOTHER
    (35) LISTFUNCS -> . funcPython LISTFUNCS
    (36) LISTFUNCS -> .

    funcPython      shift and go to state 20
    otherPython     reduce using rule 36 (LISTFUNCS -> .)
    lex             reduce using rule 36 (LISTFUNCS -> .)
    yacc            reduce using rule 36 (LISTFUNCS -> .)
    python          reduce using rule 36 (LISTFUNCS -> .)
    $end            reduce using rule 36 (LISTFUNCS -> .)

    PYTHONS                        shift and go to state 18
    LISTFUNCS                      shift and go to state 19

state 9

    (6) LEX -> lex LEXES .

    lex             reduce using rule 6 (LEX -> lex LEXES .)
    yacc            reduce using rule 6 (LEX -> lex LEXES .)
    python          reduce using rule 6 (LEX -> lex LEXES .)
    $end            reduce using rule 6 (LEX -> lex LEXES .)


state 10

    (7) LEXES -> literals . equal listliterals comment commentEnd LEXES
    (8) LEXES -> literals . equal listliterals LEXES

    equal           shift and go to state 21


state 11

    (9) LEXES -> tokens . equal oBracket LISTTOKENS cBracket comment commentEnd LEXES
    (10) LEXES -> tokens . equal oBracket LISTTOKENS cBracket LEXES

    equal           shift and go to state 22


state 12

    (14) LEXES -> ignor . equal listignore comment commentEnd LEXES
    (15) LEXES -> ignor . equal listignore LEXES

    equal           shift and go to state 23


state 13

    (16) LEXES -> er . LISTEXPDEFS LEXES
    (17) LISTEXPDEFS -> . expReg expDef LISTEXPDEFS
    (18) LISTEXPDEFS -> . expReg expDef comment commentEnd LISTEXPDEFS
    (19) LISTEXPDEFS -> .

    expReg          shift and go to state 25
    literals        reduce using rule 19 (LISTEXPDEFS -> .)
    tokens          reduce using rule 19 (LISTEXPDEFS -> .)
    ignor           reduce using rule 19 (LISTEXPDEFS -> .)
    er              reduce using rule 19 (LISTEXPDEFS -> .)
    lex             reduce using rule 19 (LISTEXPDEFS -> .)
    yacc            reduce using rule 19 (LISTEXPDEFS -> .)
    python          reduce using rule 19 (LISTEXPDEFS -> .)
    $end            reduce using rule 19 (LISTEXPDEFS -> .)

    LISTEXPDEFS                    shift and go to state 24

state 14

    (21) YACC -> yacc YACCS .

    lex             reduce using rule 21 (YACC -> yacc YACCS .)
    yacc            reduce using rule 21 (YACC -> yacc YACCS .)
    python          reduce using rule 21 (YACC -> yacc YACCS .)
    $end            reduce using rule 21 (YACC -> yacc YACCS .)


state 15

    (22) YACCS -> precedence . equal listprecedence YACCS
    (23) YACCS -> precedence . equal listprecedence comment commentEnd YACCS

    equal           shift and go to state 26


state 16

    (24) YACCS -> initParserVal . LISTVALUES YACCS
    (25) LISTVALUES -> . parserVal LISTVALUES
    (26) LISTVALUES -> . parserVal comment commentEnd LISTVALUES
    (27) LISTVALUES -> . endParserVal

    parserVal       shift and go to state 28
    endParserVal    shift and go to state 29

    LISTVALUES                     shift and go to state 27

state 17

    (28) YACCS -> grammar . LISTGRAM YACCS
    (29) LISTGRAM -> . grammarDef funcGrammar comment commentEnd LISTGRAM
    (30) LISTGRAM -> . grammarDef funcGrammar LISTGRAM
    (31) LISTGRAM -> .

    grammarDef      shift and go to state 31
    precedence      reduce using rule 31 (LISTGRAM -> .)
    initParserVal   reduce using rule 31 (LISTGRAM -> .)
    grammar         reduce using rule 31 (LISTGRAM -> .)
    lex             reduce using rule 31 (LISTGRAM -> .)
    yacc            reduce using rule 31 (LISTGRAM -> .)
    python          reduce using rule 31 (LISTGRAM -> .)
    $end            reduce using rule 31 (LISTGRAM -> .)

    LISTGRAM                       shift and go to state 30

state 18

    (33) PYTHON -> python PYTHONS .

    lex             reduce using rule 33 (PYTHON -> python PYTHONS .)
    yacc            reduce using rule 33 (PYTHON -> python PYTHONS .)
    python          reduce using rule 33 (PYTHON -> python PYTHONS .)
    $end            reduce using rule 33 (PYTHON -> python PYTHONS .)


state 19

    (34) PYTHONS -> LISTFUNCS . LISTOTHER
    (37) LISTOTHER -> . otherPython LISTOTHER
    (38) LISTOTHER -> .

    otherPython     shift and go to state 33
    lex             reduce using rule 38 (LISTOTHER -> .)
    yacc            reduce using rule 38 (LISTOTHER -> .)
    python          reduce using rule 38 (LISTOTHER -> .)
    $end            reduce using rule 38 (LISTOTHER -> .)

    LISTOTHER                      shift and go to state 32

state 20

    (35) LISTFUNCS -> funcPython . LISTFUNCS
    (35) LISTFUNCS -> . funcPython LISTFUNCS
    (36) LISTFUNCS -> .

    funcPython      shift and go to state 20
    otherPython     reduce using rule 36 (LISTFUNCS -> .)
    lex             reduce using rule 36 (LISTFUNCS -> .)
    yacc            reduce using rule 36 (LISTFUNCS -> .)
    python          reduce using rule 36 (LISTFUNCS -> .)
    $end            reduce using rule 36 (LISTFUNCS -> .)

    LISTFUNCS                      shift and go to state 34

state 21

    (7) LEXES -> literals equal . listliterals comment commentEnd LEXES
    (8) LEXES -> literals equal . listliterals LEXES

    listliterals    shift and go to state 35


state 22

    (9) LEXES -> tokens equal . oBracket LISTTOKENS cBracket comment commentEnd LEXES
    (10) LEXES -> tokens equal . oBracket LISTTOKENS cBracket LEXES

    oBracket        shift and go to state 36


state 23

    (14) LEXES -> ignor equal . listignore comment commentEnd LEXES
    (15) LEXES -> ignor equal . listignore LEXES

    listignore      shift and go to state 37


state 24

    (16) LEXES -> er LISTEXPDEFS . LEXES
    (7) LEXES -> . literals equal listliterals comment commentEnd LEXES
    (8) LEXES -> . literals equal listliterals LEXES
    (9) LEXES -> . tokens equal oBracket LISTTOKENS cBracket comment commentEnd LEXES
    (10) LEXES -> . tokens equal oBracket LISTTOKENS cBracket LEXES
    (14) LEXES -> . ignor equal listignore comment commentEnd LEXES
    (15) LEXES -> . ignor equal listignore LEXES
    (16) LEXES -> . er LISTEXPDEFS LEXES
    (20) LEXES -> .

    literals        shift and go to state 10
    tokens          shift and go to state 11
    ignor           shift and go to state 12
    er              shift and go to state 13
    lex             reduce using rule 20 (LEXES -> .)
    yacc            reduce using rule 20 (LEXES -> .)
    python          reduce using rule 20 (LEXES -> .)
    $end            reduce using rule 20 (LEXES -> .)

    LEXES                          shift and go to state 38

state 25

    (17) LISTEXPDEFS -> expReg . expDef LISTEXPDEFS
    (18) LISTEXPDEFS -> expReg . expDef comment commentEnd LISTEXPDEFS

    expDef          shift and go to state 39


state 26

    (22) YACCS -> precedence equal . listprecedence YACCS
    (23) YACCS -> precedence equal . listprecedence comment commentEnd YACCS

    listprecedence  shift and go to state 40


state 27

    (24) YACCS -> initParserVal LISTVALUES . YACCS
    (22) YACCS -> . precedence equal listprecedence YACCS
    (23) YACCS -> . precedence equal listprecedence comment commentEnd YACCS
    (24) YACCS -> . initParserVal LISTVALUES YACCS
    (28) YACCS -> . grammar LISTGRAM YACCS
    (32) YACCS -> .

    precedence      shift and go to state 15
    initParserVal   shift and go to state 16
    grammar         shift and go to state 17
    lex             reduce using rule 32 (YACCS -> .)
    yacc            reduce using rule 32 (YACCS -> .)
    python          reduce using rule 32 (YACCS -> .)
    $end            reduce using rule 32 (YACCS -> .)

    YACCS                          shift and go to state 41

state 28

    (25) LISTVALUES -> parserVal . LISTVALUES
    (26) LISTVALUES -> parserVal . comment commentEnd LISTVALUES
    (25) LISTVALUES -> . parserVal LISTVALUES
    (26) LISTVALUES -> . parserVal comment commentEnd LISTVALUES
    (27) LISTVALUES -> . endParserVal

    comment         shift and go to state 43
    parserVal       shift and go to state 28
    endParserVal    shift and go to state 29

    LISTVALUES                     shift and go to state 42

state 29

    (27) LISTVALUES -> endParserVal .

    precedence      reduce using rule 27 (LISTVALUES -> endParserVal .)
    initParserVal   reduce using rule 27 (LISTVALUES -> endParserVal .)
    grammar         reduce using rule 27 (LISTVALUES -> endParserVal .)
    lex             reduce using rule 27 (LISTVALUES -> endParserVal .)
    yacc            reduce using rule 27 (LISTVALUES -> endParserVal .)
    python          reduce using rule 27 (LISTVALUES -> endParserVal .)
    $end            reduce using rule 27 (LISTVALUES -> endParserVal .)


state 30

    (28) YACCS -> grammar LISTGRAM . YACCS
    (22) YACCS -> . precedence equal listprecedence YACCS
    (23) YACCS -> . precedence equal listprecedence comment commentEnd YACCS
    (24) YACCS -> . initParserVal LISTVALUES YACCS
    (28) YACCS -> . grammar LISTGRAM YACCS
    (32) YACCS -> .

    precedence      shift and go to state 15
    initParserVal   shift and go to state 16
    grammar         shift and go to state 17
    lex             reduce using rule 32 (YACCS -> .)
    yacc            reduce using rule 32 (YACCS -> .)
    python          reduce using rule 32 (YACCS -> .)
    $end            reduce using rule 32 (YACCS -> .)

    YACCS                          shift and go to state 44

state 31

    (29) LISTGRAM -> grammarDef . funcGrammar comment commentEnd LISTGRAM
    (30) LISTGRAM -> grammarDef . funcGrammar LISTGRAM

    funcGrammar     shift and go to state 45


state 32

    (34) PYTHONS -> LISTFUNCS LISTOTHER .

    lex             reduce using rule 34 (PYTHONS -> LISTFUNCS LISTOTHER .)
    yacc            reduce using rule 34 (PYTHONS -> LISTFUNCS LISTOTHER .)
    python          reduce using rule 34 (PYTHONS -> LISTFUNCS LISTOTHER .)
    $end            reduce using rule 34 (PYTHONS -> LISTFUNCS LISTOTHER .)


state 33

    (37) LISTOTHER -> otherPython . LISTOTHER
    (37) LISTOTHER -> . otherPython LISTOTHER
    (38) LISTOTHER -> .

    otherPython     shift and go to state 33
    lex             reduce using rule 38 (LISTOTHER -> .)
    yacc            reduce using rule 38 (LISTOTHER -> .)
    python          reduce using rule 38 (LISTOTHER -> .)
    $end            reduce using rule 38 (LISTOTHER -> .)

    LISTOTHER                      shift and go to state 46

state 34

    (35) LISTFUNCS -> funcPython LISTFUNCS .

    otherPython     reduce using rule 35 (LISTFUNCS -> funcPython LISTFUNCS .)
    lex             reduce using rule 35 (LISTFUNCS -> funcPython LISTFUNCS .)
    yacc            reduce using rule 35 (LISTFUNCS -> funcPython LISTFUNCS .)
    python          reduce using rule 35 (LISTFUNCS -> funcPython LISTFUNCS .)
    $end            reduce using rule 35 (LISTFUNCS -> funcPython LISTFUNCS .)


state 35

    (7) LEXES -> literals equal listliterals . comment commentEnd LEXES
    (8) LEXES -> literals equal listliterals . LEXES
    (7) LEXES -> . literals equal listliterals comment commentEnd LEXES
    (8) LEXES -> . literals equal listliterals LEXES
    (9) LEXES -> . tokens equal oBracket LISTTOKENS cBracket comment commentEnd LEXES
    (10) LEXES -> . tokens equal oBracket LISTTOKENS cBracket LEXES
    (14) LEXES -> . ignor equal listignore comment commentEnd LEXES
    (15) LEXES -> . ignor equal listignore LEXES
    (16) LEXES -> . er LISTEXPDEFS LEXES
    (20) LEXES -> .

    comment         shift and go to state 47
    literals        shift and go to state 10
    tokens          shift and go to state 11
    ignor           shift and go to state 12
    er              shift and go to state 13
    lex             reduce using rule 20 (LEXES -> .)
    yacc            reduce using rule 20 (LEXES -> .)
    python          reduce using rule 20 (LEXES -> .)
    $end            reduce using rule 20 (LEXES -> .)

    LEXES                          shift and go to state 48

state 36

    (9) LEXES -> tokens equal oBracket . LISTTOKENS cBracket comment commentEnd LEXES
    (10) LEXES -> tokens equal oBracket . LISTTOKENS cBracket LEXES
    (11) LISTTOKENS -> . prime token prime CONTLISTTOKENS

    prime           shift and go to state 50

    LISTTOKENS                     shift and go to state 49

state 37

    (14) LEXES -> ignor equal listignore . comment commentEnd LEXES
    (15) LEXES -> ignor equal listignore . LEXES
    (7) LEXES -> . literals equal listliterals comment commentEnd LEXES
    (8) LEXES -> . literals equal listliterals LEXES
    (9) LEXES -> . tokens equal oBracket LISTTOKENS cBracket comment commentEnd LEXES
    (10) LEXES -> . tokens equal oBracket LISTTOKENS cBracket LEXES
    (14) LEXES -> . ignor equal listignore comment commentEnd LEXES
    (15) LEXES -> . ignor equal listignore LEXES
    (16) LEXES -> . er LISTEXPDEFS LEXES
    (20) LEXES -> .

    comment         shift and go to state 51
    literals        shift and go to state 10
    tokens          shift and go to state 11
    ignor           shift and go to state 12
    er              shift and go to state 13
    lex             reduce using rule 20 (LEXES -> .)
    yacc            reduce using rule 20 (LEXES -> .)
    python          reduce using rule 20 (LEXES -> .)
    $end            reduce using rule 20 (LEXES -> .)

    LEXES                          shift and go to state 52

state 38

    (16) LEXES -> er LISTEXPDEFS LEXES .

    lex             reduce using rule 16 (LEXES -> er LISTEXPDEFS LEXES .)
    yacc            reduce using rule 16 (LEXES -> er LISTEXPDEFS LEXES .)
    python          reduce using rule 16 (LEXES -> er LISTEXPDEFS LEXES .)
    $end            reduce using rule 16 (LEXES -> er LISTEXPDEFS LEXES .)


state 39

    (17) LISTEXPDEFS -> expReg expDef . LISTEXPDEFS
    (18) LISTEXPDEFS -> expReg expDef . comment commentEnd LISTEXPDEFS
    (17) LISTEXPDEFS -> . expReg expDef LISTEXPDEFS
    (18) LISTEXPDEFS -> . expReg expDef comment commentEnd LISTEXPDEFS
    (19) LISTEXPDEFS -> .

    comment         shift and go to state 54
    expReg          shift and go to state 25
    literals        reduce using rule 19 (LISTEXPDEFS -> .)
    tokens          reduce using rule 19 (LISTEXPDEFS -> .)
    ignor           reduce using rule 19 (LISTEXPDEFS -> .)
    er              reduce using rule 19 (LISTEXPDEFS -> .)
    lex             reduce using rule 19 (LISTEXPDEFS -> .)
    yacc            reduce using rule 19 (LISTEXPDEFS -> .)
    python          reduce using rule 19 (LISTEXPDEFS -> .)
    $end            reduce using rule 19 (LISTEXPDEFS -> .)

    LISTEXPDEFS                    shift and go to state 53

state 40

    (22) YACCS -> precedence equal listprecedence . YACCS
    (23) YACCS -> precedence equal listprecedence . comment commentEnd YACCS
    (22) YACCS -> . precedence equal listprecedence YACCS
    (23) YACCS -> . precedence equal listprecedence comment commentEnd YACCS
    (24) YACCS -> . initParserVal LISTVALUES YACCS
    (28) YACCS -> . grammar LISTGRAM YACCS
    (32) YACCS -> .

    comment         shift and go to state 56
    precedence      shift and go to state 15
    initParserVal   shift and go to state 16
    grammar         shift and go to state 17
    lex             reduce using rule 32 (YACCS -> .)
    yacc            reduce using rule 32 (YACCS -> .)
    python          reduce using rule 32 (YACCS -> .)
    $end            reduce using rule 32 (YACCS -> .)

    YACCS                          shift and go to state 55

state 41

    (24) YACCS -> initParserVal LISTVALUES YACCS .

    lex             reduce using rule 24 (YACCS -> initParserVal LISTVALUES YACCS .)
    yacc            reduce using rule 24 (YACCS -> initParserVal LISTVALUES YACCS .)
    python          reduce using rule 24 (YACCS -> initParserVal LISTVALUES YACCS .)
    $end            reduce using rule 24 (YACCS -> initParserVal LISTVALUES YACCS .)


state 42

    (25) LISTVALUES -> parserVal LISTVALUES .

    precedence      reduce using rule 25 (LISTVALUES -> parserVal LISTVALUES .)
    initParserVal   reduce using rule 25 (LISTVALUES -> parserVal LISTVALUES .)
    grammar         reduce using rule 25 (LISTVALUES -> parserVal LISTVALUES .)
    lex             reduce using rule 25 (LISTVALUES -> parserVal LISTVALUES .)
    yacc            reduce using rule 25 (LISTVALUES -> parserVal LISTVALUES .)
    python          reduce using rule 25 (LISTVALUES -> parserVal LISTVALUES .)
    $end            reduce using rule 25 (LISTVALUES -> parserVal LISTVALUES .)


state 43

    (26) LISTVALUES -> parserVal comment . commentEnd LISTVALUES

    commentEnd      shift and go to state 57


state 44

    (28) YACCS -> grammar LISTGRAM YACCS .

    lex             reduce using rule 28 (YACCS -> grammar LISTGRAM YACCS .)
    yacc            reduce using rule 28 (YACCS -> grammar LISTGRAM YACCS .)
    python          reduce using rule 28 (YACCS -> grammar LISTGRAM YACCS .)
    $end            reduce using rule 28 (YACCS -> grammar LISTGRAM YACCS .)


state 45

    (29) LISTGRAM -> grammarDef funcGrammar . comment commentEnd LISTGRAM
    (30) LISTGRAM -> grammarDef funcGrammar . LISTGRAM
    (29) LISTGRAM -> . grammarDef funcGrammar comment commentEnd LISTGRAM
    (30) LISTGRAM -> . grammarDef funcGrammar LISTGRAM
    (31) LISTGRAM -> .

    comment         shift and go to state 58
    grammarDef      shift and go to state 31
    precedence      reduce using rule 31 (LISTGRAM -> .)
    initParserVal   reduce using rule 31 (LISTGRAM -> .)
    grammar         reduce using rule 31 (LISTGRAM -> .)
    lex             reduce using rule 31 (LISTGRAM -> .)
    yacc            reduce using rule 31 (LISTGRAM -> .)
    python          reduce using rule 31 (LISTGRAM -> .)
    $end            reduce using rule 31 (LISTGRAM -> .)

    LISTGRAM                       shift and go to state 59

state 46

    (37) LISTOTHER -> otherPython LISTOTHER .

    lex             reduce using rule 37 (LISTOTHER -> otherPython LISTOTHER .)
    yacc            reduce using rule 37 (LISTOTHER -> otherPython LISTOTHER .)
    python          reduce using rule 37 (LISTOTHER -> otherPython LISTOTHER .)
    $end            reduce using rule 37 (LISTOTHER -> otherPython LISTOTHER .)


state 47

    (7) LEXES -> literals equal listliterals comment . commentEnd LEXES

    commentEnd      shift and go to state 60


state 48

    (8) LEXES -> literals equal listliterals LEXES .

    lex             reduce using rule 8 (LEXES -> literals equal listliterals LEXES .)
    yacc            reduce using rule 8 (LEXES -> literals equal listliterals LEXES .)
    python          reduce using rule 8 (LEXES -> literals equal listliterals LEXES .)
    $end            reduce using rule 8 (LEXES -> literals equal listliterals LEXES .)


state 49

    (9) LEXES -> tokens equal oBracket LISTTOKENS . cBracket comment commentEnd LEXES
    (10) LEXES -> tokens equal oBracket LISTTOKENS . cBracket LEXES

    cBracket        shift and go to state 61


state 50

    (11) LISTTOKENS -> prime . token prime CONTLISTTOKENS

    token           shift and go to state 62


state 51

    (14) LEXES -> ignor equal listignore comment . commentEnd LEXES

    commentEnd      shift and go to state 63


state 52

    (15) LEXES -> ignor equal listignore LEXES .

    lex             reduce using rule 15 (LEXES -> ignor equal listignore LEXES .)
    yacc            reduce using rule 15 (LEXES -> ignor equal listignore LEXES .)
    python          reduce using rule 15 (LEXES -> ignor equal listignore LEXES .)
    $end            reduce using rule 15 (LEXES -> ignor equal listignore LEXES .)


state 53

    (17) LISTEXPDEFS -> expReg expDef LISTEXPDEFS .

    literals        reduce using rule 17 (LISTEXPDEFS -> expReg expDef LISTEXPDEFS .)
    tokens          reduce using rule 17 (LISTEXPDEFS -> expReg expDef LISTEXPDEFS .)
    ignor           reduce using rule 17 (LISTEXPDEFS -> expReg expDef LISTEXPDEFS .)
    er              reduce using rule 17 (LISTEXPDEFS -> expReg expDef LISTEXPDEFS .)
    lex             reduce using rule 17 (LISTEXPDEFS -> expReg expDef LISTEXPDEFS .)
    yacc            reduce using rule 17 (LISTEXPDEFS -> expReg expDef LISTEXPDEFS .)
    python          reduce using rule 17 (LISTEXPDEFS -> expReg expDef LISTEXPDEFS .)
    $end            reduce using rule 17 (LISTEXPDEFS -> expReg expDef LISTEXPDEFS .)


state 54

    (18) LISTEXPDEFS -> expReg expDef comment . commentEnd LISTEXPDEFS

    commentEnd      shift and go to state 64


state 55

    (22) YACCS -> precedence equal listprecedence YACCS .

    lex             reduce using rule 22 (YACCS -> precedence equal listprecedence YACCS .)
    yacc            reduce using rule 22 (YACCS -> precedence equal listprecedence YACCS .)
    python          reduce using rule 22 (YACCS -> precedence equal listprecedence YACCS .)
    $end            reduce using rule 22 (YACCS -> precedence equal listprecedence YACCS .)


state 56

    (23) YACCS -> precedence equal listprecedence comment . commentEnd YACCS

    commentEnd      shift and go to state 65


state 57

    (26) LISTVALUES -> parserVal comment commentEnd . LISTVALUES
    (25) LISTVALUES -> . parserVal LISTVALUES
    (26) LISTVALUES -> . parserVal comment commentEnd LISTVALUES
    (27) LISTVALUES -> . endParserVal

    parserVal       shift and go to state 28
    endParserVal    shift and go to state 29

    LISTVALUES                     shift and go to state 66

state 58

    (29) LISTGRAM -> grammarDef funcGrammar comment . commentEnd LISTGRAM

    commentEnd      shift and go to state 67


state 59

    (30) LISTGRAM -> grammarDef funcGrammar LISTGRAM .

    precedence      reduce using rule 30 (LISTGRAM -> grammarDef funcGrammar LISTGRAM .)
    initParserVal   reduce using rule 30 (LISTGRAM -> grammarDef funcGrammar LISTGRAM .)
    grammar         reduce using rule 30 (LISTGRAM -> grammarDef funcGrammar LISTGRAM .)
    lex             reduce using rule 30 (LISTGRAM -> grammarDef funcGrammar LISTGRAM .)
    yacc            reduce using rule 30 (LISTGRAM -> grammarDef funcGrammar LISTGRAM .)
    python          reduce using rule 30 (LISTGRAM -> grammarDef funcGrammar LISTGRAM .)
    $end            reduce using rule 30 (LISTGRAM -> grammarDef funcGrammar LISTGRAM .)


state 60

    (7) LEXES -> literals equal listliterals comment commentEnd . LEXES
    (7) LEXES -> . literals equal listliterals comment commentEnd LEXES
    (8) LEXES -> . literals equal listliterals LEXES
    (9) LEXES -> . tokens equal oBracket LISTTOKENS cBracket comment commentEnd LEXES
    (10) LEXES -> . tokens equal oBracket LISTTOKENS cBracket LEXES
    (14) LEXES -> . ignor equal listignore comment commentEnd LEXES
    (15) LEXES -> . ignor equal listignore LEXES
    (16) LEXES -> . er LISTEXPDEFS LEXES
    (20) LEXES -> .

    literals        shift and go to state 10
    tokens          shift and go to state 11
    ignor           shift and go to state 12
    er              shift and go to state 13
    lex             reduce using rule 20 (LEXES -> .)
    yacc            reduce using rule 20 (LEXES -> .)
    python          reduce using rule 20 (LEXES -> .)
    $end            reduce using rule 20 (LEXES -> .)

    LEXES                          shift and go to state 68

state 61

    (9) LEXES -> tokens equal oBracket LISTTOKENS cBracket . comment commentEnd LEXES
    (10) LEXES -> tokens equal oBracket LISTTOKENS cBracket . LEXES
    (7) LEXES -> . literals equal listliterals comment commentEnd LEXES
    (8) LEXES -> . literals equal listliterals LEXES
    (9) LEXES -> . tokens equal oBracket LISTTOKENS cBracket comment commentEnd LEXES
    (10) LEXES -> . tokens equal oBracket LISTTOKENS cBracket LEXES
    (14) LEXES -> . ignor equal listignore comment commentEnd LEXES
    (15) LEXES -> . ignor equal listignore LEXES
    (16) LEXES -> . er LISTEXPDEFS LEXES
    (20) LEXES -> .

    comment         shift and go to state 69
    literals        shift and go to state 10
    tokens          shift and go to state 11
    ignor           shift and go to state 12
    er              shift and go to state 13
    lex             reduce using rule 20 (LEXES -> .)
    yacc            reduce using rule 20 (LEXES -> .)
    python          reduce using rule 20 (LEXES -> .)
    $end            reduce using rule 20 (LEXES -> .)

    LEXES                          shift and go to state 70

state 62

    (11) LISTTOKENS -> prime token . prime CONTLISTTOKENS

    prime           shift and go to state 71


state 63

    (14) LEXES -> ignor equal listignore comment commentEnd . LEXES
    (7) LEXES -> . literals equal listliterals comment commentEnd LEXES
    (8) LEXES -> . literals equal listliterals LEXES
    (9) LEXES -> . tokens equal oBracket LISTTOKENS cBracket comment commentEnd LEXES
    (10) LEXES -> . tokens equal oBracket LISTTOKENS cBracket LEXES
    (14) LEXES -> . ignor equal listignore comment commentEnd LEXES
    (15) LEXES -> . ignor equal listignore LEXES
    (16) LEXES -> . er LISTEXPDEFS LEXES
    (20) LEXES -> .

    literals        shift and go to state 10
    tokens          shift and go to state 11
    ignor           shift and go to state 12
    er              shift and go to state 13
    lex             reduce using rule 20 (LEXES -> .)
    yacc            reduce using rule 20 (LEXES -> .)
    python          reduce using rule 20 (LEXES -> .)
    $end            reduce using rule 20 (LEXES -> .)

    LEXES                          shift and go to state 72

state 64

    (18) LISTEXPDEFS -> expReg expDef comment commentEnd . LISTEXPDEFS
    (17) LISTEXPDEFS -> . expReg expDef LISTEXPDEFS
    (18) LISTEXPDEFS -> . expReg expDef comment commentEnd LISTEXPDEFS
    (19) LISTEXPDEFS -> .

    expReg          shift and go to state 25
    literals        reduce using rule 19 (LISTEXPDEFS -> .)
    tokens          reduce using rule 19 (LISTEXPDEFS -> .)
    ignor           reduce using rule 19 (LISTEXPDEFS -> .)
    er              reduce using rule 19 (LISTEXPDEFS -> .)
    lex             reduce using rule 19 (LISTEXPDEFS -> .)
    yacc            reduce using rule 19 (LISTEXPDEFS -> .)
    python          reduce using rule 19 (LISTEXPDEFS -> .)
    $end            reduce using rule 19 (LISTEXPDEFS -> .)

    LISTEXPDEFS                    shift and go to state 73

state 65

    (23) YACCS -> precedence equal listprecedence comment commentEnd . YACCS
    (22) YACCS -> . precedence equal listprecedence YACCS
    (23) YACCS -> . precedence equal listprecedence comment commentEnd YACCS
    (24) YACCS -> . initParserVal LISTVALUES YACCS
    (28) YACCS -> . grammar LISTGRAM YACCS
    (32) YACCS -> .

    precedence      shift and go to state 15
    initParserVal   shift and go to state 16
    grammar         shift and go to state 17
    lex             reduce using rule 32 (YACCS -> .)
    yacc            reduce using rule 32 (YACCS -> .)
    python          reduce using rule 32 (YACCS -> .)
    $end            reduce using rule 32 (YACCS -> .)

    YACCS                          shift and go to state 74

state 66

    (26) LISTVALUES -> parserVal comment commentEnd LISTVALUES .

    precedence      reduce using rule 26 (LISTVALUES -> parserVal comment commentEnd LISTVALUES .)
    initParserVal   reduce using rule 26 (LISTVALUES -> parserVal comment commentEnd LISTVALUES .)
    grammar         reduce using rule 26 (LISTVALUES -> parserVal comment commentEnd LISTVALUES .)
    lex             reduce using rule 26 (LISTVALUES -> parserVal comment commentEnd LISTVALUES .)
    yacc            reduce using rule 26 (LISTVALUES -> parserVal comment commentEnd LISTVALUES .)
    python          reduce using rule 26 (LISTVALUES -> parserVal comment commentEnd LISTVALUES .)
    $end            reduce using rule 26 (LISTVALUES -> parserVal comment commentEnd LISTVALUES .)


state 67

    (29) LISTGRAM -> grammarDef funcGrammar comment commentEnd . LISTGRAM
    (29) LISTGRAM -> . grammarDef funcGrammar comment commentEnd LISTGRAM
    (30) LISTGRAM -> . grammarDef funcGrammar LISTGRAM
    (31) LISTGRAM -> .

    grammarDef      shift and go to state 31
    precedence      reduce using rule 31 (LISTGRAM -> .)
    initParserVal   reduce using rule 31 (LISTGRAM -> .)
    grammar         reduce using rule 31 (LISTGRAM -> .)
    lex             reduce using rule 31 (LISTGRAM -> .)
    yacc            reduce using rule 31 (LISTGRAM -> .)
    python          reduce using rule 31 (LISTGRAM -> .)
    $end            reduce using rule 31 (LISTGRAM -> .)

    LISTGRAM                       shift and go to state 75

state 68

    (7) LEXES -> literals equal listliterals comment commentEnd LEXES .

    lex             reduce using rule 7 (LEXES -> literals equal listliterals comment commentEnd LEXES .)
    yacc            reduce using rule 7 (LEXES -> literals equal listliterals comment commentEnd LEXES .)
    python          reduce using rule 7 (LEXES -> literals equal listliterals comment commentEnd LEXES .)
    $end            reduce using rule 7 (LEXES -> literals equal listliterals comment commentEnd LEXES .)


state 69

    (9) LEXES -> tokens equal oBracket LISTTOKENS cBracket comment . commentEnd LEXES

    commentEnd      shift and go to state 76


state 70

    (10) LEXES -> tokens equal oBracket LISTTOKENS cBracket LEXES .

    lex             reduce using rule 10 (LEXES -> tokens equal oBracket LISTTOKENS cBracket LEXES .)
    yacc            reduce using rule 10 (LEXES -> tokens equal oBracket LISTTOKENS cBracket LEXES .)
    python          reduce using rule 10 (LEXES -> tokens equal oBracket LISTTOKENS cBracket LEXES .)
    $end            reduce using rule 10 (LEXES -> tokens equal oBracket LISTTOKENS cBracket LEXES .)


state 71

    (11) LISTTOKENS -> prime token prime . CONTLISTTOKENS
    (12) CONTLISTTOKENS -> . comma prime token prime CONTLISTTOKENS
    (13) CONTLISTTOKENS -> .

    comma           shift and go to state 78
    cBracket        reduce using rule 13 (CONTLISTTOKENS -> .)

    CONTLISTTOKENS                 shift and go to state 77

state 72

    (14) LEXES -> ignor equal listignore comment commentEnd LEXES .

    lex             reduce using rule 14 (LEXES -> ignor equal listignore comment commentEnd LEXES .)
    yacc            reduce using rule 14 (LEXES -> ignor equal listignore comment commentEnd LEXES .)
    python          reduce using rule 14 (LEXES -> ignor equal listignore comment commentEnd LEXES .)
    $end            reduce using rule 14 (LEXES -> ignor equal listignore comment commentEnd LEXES .)


state 73

    (18) LISTEXPDEFS -> expReg expDef comment commentEnd LISTEXPDEFS .

    literals        reduce using rule 18 (LISTEXPDEFS -> expReg expDef comment commentEnd LISTEXPDEFS .)
    tokens          reduce using rule 18 (LISTEXPDEFS -> expReg expDef comment commentEnd LISTEXPDEFS .)
    ignor           reduce using rule 18 (LISTEXPDEFS -> expReg expDef comment commentEnd LISTEXPDEFS .)
    er              reduce using rule 18 (LISTEXPDEFS -> expReg expDef comment commentEnd LISTEXPDEFS .)
    lex             reduce using rule 18 (LISTEXPDEFS -> expReg expDef comment commentEnd LISTEXPDEFS .)
    yacc            reduce using rule 18 (LISTEXPDEFS -> expReg expDef comment commentEnd LISTEXPDEFS .)
    python          reduce using rule 18 (LISTEXPDEFS -> expReg expDef comment commentEnd LISTEXPDEFS .)
    $end            reduce using rule 18 (LISTEXPDEFS -> expReg expDef comment commentEnd LISTEXPDEFS .)


state 74

    (23) YACCS -> precedence equal listprecedence comment commentEnd YACCS .

    lex             reduce using rule 23 (YACCS -> precedence equal listprecedence comment commentEnd YACCS .)
    yacc            reduce using rule 23 (YACCS -> precedence equal listprecedence comment commentEnd YACCS .)
    python          reduce using rule 23 (YACCS -> precedence equal listprecedence comment commentEnd YACCS .)
    $end            reduce using rule 23 (YACCS -> precedence equal listprecedence comment commentEnd YACCS .)


state 75

    (29) LISTGRAM -> grammarDef funcGrammar comment commentEnd LISTGRAM .

    precedence      reduce using rule 29 (LISTGRAM -> grammarDef funcGrammar comment commentEnd LISTGRAM .)
    initParserVal   reduce using rule 29 (LISTGRAM -> grammarDef funcGrammar comment commentEnd LISTGRAM .)
    grammar         reduce using rule 29 (LISTGRAM -> grammarDef funcGrammar comment commentEnd LISTGRAM .)
    lex             reduce using rule 29 (LISTGRAM -> grammarDef funcGrammar comment commentEnd LISTGRAM .)
    yacc            reduce using rule 29 (LISTGRAM -> grammarDef funcGrammar comment commentEnd LISTGRAM .)
    python          reduce using rule 29 (LISTGRAM -> grammarDef funcGrammar comment commentEnd LISTGRAM .)
    $end            reduce using rule 29 (LISTGRAM -> grammarDef funcGrammar comment commentEnd LISTGRAM .)


state 76

    (9) LEXES -> tokens equal oBracket LISTTOKENS cBracket comment commentEnd . LEXES
    (7) LEXES -> . literals equal listliterals comment commentEnd LEXES
    (8) LEXES -> . literals equal listliterals LEXES
    (9) LEXES -> . tokens equal oBracket LISTTOKENS cBracket comment commentEnd LEXES
    (10) LEXES -> . tokens equal oBracket LISTTOKENS cBracket LEXES
    (14) LEXES -> . ignor equal listignore comment commentEnd LEXES
    (15) LEXES -> . ignor equal listignore LEXES
    (16) LEXES -> . er LISTEXPDEFS LEXES
    (20) LEXES -> .

    literals        shift and go to state 10
    tokens          shift and go to state 11
    ignor           shift and go to state 12
    er              shift and go to state 13
    lex             reduce using rule 20 (LEXES -> .)
    yacc            reduce using rule 20 (LEXES -> .)
    python          reduce using rule 20 (LEXES -> .)
    $end            reduce using rule 20 (LEXES -> .)

    LEXES                          shift and go to state 79

state 77

    (11) LISTTOKENS -> prime token prime CONTLISTTOKENS .

    cBracket        reduce using rule 11 (LISTTOKENS -> prime token prime CONTLISTTOKENS .)


state 78

    (12) CONTLISTTOKENS -> comma . prime token prime CONTLISTTOKENS

    prime           shift and go to state 80


state 79

    (9) LEXES -> tokens equal oBracket LISTTOKENS cBracket comment commentEnd LEXES .

    lex             reduce using rule 9 (LEXES -> tokens equal oBracket LISTTOKENS cBracket comment commentEnd LEXES .)
    yacc            reduce using rule 9 (LEXES -> tokens equal oBracket LISTTOKENS cBracket comment commentEnd LEXES .)
    python          reduce using rule 9 (LEXES -> tokens equal oBracket LISTTOKENS cBracket comment commentEnd LEXES .)
    $end            reduce using rule 9 (LEXES -> tokens equal oBracket LISTTOKENS cBracket comment commentEnd LEXES .)


state 80

    (12) CONTLISTTOKENS -> comma prime . token prime CONTLISTTOKENS

    token           shift and go to state 81


state 81

    (12) CONTLISTTOKENS -> comma prime token . prime CONTLISTTOKENS

    prime           shift and go to state 82


state 82

    (12) CONTLISTTOKENS -> comma prime token prime . CONTLISTTOKENS
    (12) CONTLISTTOKENS -> . comma prime token prime CONTLISTTOKENS
    (13) CONTLISTTOKENS -> .

    comma           shift and go to state 78
    cBracket        reduce using rule 13 (CONTLISTTOKENS -> .)

    CONTLISTTOKENS                 shift and go to state 83

state 83

    (12) CONTLISTTOKENS -> comma prime token prime CONTLISTTOKENS .

    cBracket        reduce using rule 12 (CONTLISTTOKENS -> comma prime token prime CONTLISTTOKENS .)

