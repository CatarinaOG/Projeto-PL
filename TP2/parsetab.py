
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'cBracket colon comma equal ignor lex listignore listliterals listprecedence literals oBracket precedence prime python quote token tokens yaccZ : GRAMMARGRAMMAR : GRAMMAR LEXGRAMMAR : GRAMMAR yaccGRAMMAR : GRAMMAR pythonGRAMMAR : LEX : lex LEXES LEXES : literals equal listliterals LEXESLEXES : tokens equal oBracket LISTTOKENS cBracket LEXES LISTTOKENS : prime token prime CONTLISTTOKENSCONTLISTTOKENS : comma prime token prime CONTLISTTOKENS CONTLISTTOKENS : LEXES : ignor equal listignore LEXESLEXES : '
    
_lr_action_items = {'yacc':([0,2,3,4,5,6,7,14,16,17,20,21,23,],[-5,4,-2,-3,-4,-13,-6,-13,-13,-7,-12,-13,-8,]),'python':([0,2,3,4,5,6,7,14,16,17,20,21,23,],[-5,5,-2,-3,-4,-13,-6,-13,-13,-7,-12,-13,-8,]),'lex':([0,2,3,4,5,6,7,14,16,17,20,21,23,],[-5,6,-2,-3,-4,-13,-6,-13,-13,-7,-12,-13,-8,]),'$end':([0,1,2,3,4,5,6,7,14,16,17,20,21,23,],[-5,0,-1,-2,-3,-4,-13,-6,-13,-13,-7,-12,-13,-8,]),'literals':([6,14,16,21,],[8,8,8,8,]),'tokens':([6,14,16,21,],[9,9,9,9,]),'ignor':([6,14,16,21,],[10,10,10,10,]),'equal':([8,9,10,],[11,12,13,]),'listliterals':([11,],[14,]),'oBracket':([12,],[15,]),'listignore':([13,],[16,]),'prime':([15,22,26,28,],[19,24,27,29,]),'cBracket':([18,24,25,29,30,],[21,-11,-9,-11,-10,]),'token':([19,27,],[22,28,]),'comma':([24,29,],[26,26,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Z':([0,],[1,]),'GRAMMAR':([0,],[2,]),'LEX':([2,],[3,]),'LEXES':([6,14,16,21,],[7,17,20,23,]),'LISTTOKENS':([15,],[18,]),'CONTLISTTOKENS':([24,29,],[25,30,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Z","S'",1,None,None,None),
  ('Z -> GRAMMAR','Z',1,'p_GRAMMATICA','TP2_yacc.py',12),
  ('GRAMMAR -> GRAMMAR LEX','GRAMMAR',2,'p_GRAMMAR_lex','TP2_yacc.py',15),
  ('GRAMMAR -> GRAMMAR yacc','GRAMMAR',2,'p_GRAMMAR_yacc','TP2_yacc.py',18),
  ('GRAMMAR -> GRAMMAR python','GRAMMAR',2,'p_GRAMMAR_python','TP2_yacc.py',21),
  ('GRAMMAR -> <empty>','GRAMMAR',0,'p_GRAMMAR_empty','TP2_yacc.py',24),
  ('LEX -> lex LEXES','LEX',2,'p_LEX','TP2_yacc.py',31),
  ('LEXES -> literals equal listliterals LEXES','LEXES',4,'p_LEXES_LITERALS','TP2_yacc.py',36),
  ('LEXES -> tokens equal oBracket LISTTOKENS cBracket LEXES','LEXES',6,'p_LEXES_TOKENS','TP2_yacc.py',41),
  ('LISTTOKENS -> prime token prime CONTLISTTOKENS','LISTTOKENS',4,'p_LISTTOKENS','TP2_yacc.py',45),
  ('CONTLISTTOKENS -> comma prime token prime CONTLISTTOKENS','CONTLISTTOKENS',5,'p_CONTLISTTOKENS','TP2_yacc.py',49),
  ('CONTLISTTOKENS -> <empty>','CONTLISTTOKENS',0,'p_CONTLISTTOKENS_EMPTY','TP2_yacc.py',53),
  ('LEXES -> ignor equal listignore LEXES','LEXES',4,'p_LEXES_IGNORE','TP2_yacc.py',61),
  ('LEXES -> <empty>','LEXES',0,'p_LEXES_EMPTY','TP2_yacc.py',68),
]
