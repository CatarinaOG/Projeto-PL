
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'cBracket colon comma comment commentEnd endParserVal equal er expDef expReg funcGrammar funcPython grammar grammarDef ignor initParserVal lex listignore listliterals listprecedence literals oBracket otherPython parserVal precedence prime python quote token tokens yaccZ : GRAMMARGRAMMAR : GRAMMAR LEXGRAMMAR : GRAMMAR YACCGRAMMAR : GRAMMAR PYTHONGRAMMAR : LEX : lex LEXES LEXES : literals equal listliterals comment commentEnd LEXESLEXES : literals equal listliterals LEXESLEXES : tokens equal oBracket LISTTOKENS cBracket comment commentEnd LEXES LEXES : tokens equal oBracket LISTTOKENS cBracket LEXES LISTTOKENS : prime token prime CONTLISTTOKENSCONTLISTTOKENS : comma prime token prime CONTLISTTOKENS CONTLISTTOKENS : LEXES : ignor equal listignore comment commentEnd LEXESLEXES : ignor equal listignore LEXESLEXES : er LISTEXPDEFS LEXESLISTEXPDEFS : expReg expDef LISTEXPDEFSLISTEXPDEFS : expReg expDef comment commentEnd LISTEXPDEFSLISTEXPDEFS : LEXES : YACC : yacc YACCSYACCS : precedence equal listprecedence YACCSYACCS : precedence equal listprecedence comment commentEnd YACCSYACCS : initParserVal LISTVALUES YACCSLISTVALUES : parserVal LISTVALUESLISTVALUES : parserVal comment commentEnd LISTVALUESLISTVALUES : endParserValYACCS : grammar LISTGRAM YACCSLISTGRAM : grammarDef funcGrammar comment commentEnd LISTGRAMLISTGRAM : grammarDef funcGrammar LISTGRAMLISTGRAM : YACCS : PYTHON : python PYTHONSPYTHONS : LISTFUNCS LISTOTHERLISTFUNCS : funcPython LISTFUNCSLISTFUNCS : LISTOTHER : otherPython LISTOTHERLISTOTHER : '
    
_lr_action_items = {'lex':([0,2,3,4,5,6,7,8,9,13,14,17,18,19,20,24,27,29,30,32,33,34,35,37,38,39,40,41,42,44,45,46,48,52,53,55,59,60,61,63,64,65,66,67,68,70,72,73,74,75,76,79,],[-5,6,-2,-3,-4,-20,-32,-36,-6,-19,-21,-31,-33,-38,-36,-20,-32,-27,-32,-34,-38,-35,-20,-20,-16,-19,-32,-24,-25,-28,-31,-37,-8,-15,-17,-22,-30,-20,-20,-20,-19,-32,-26,-31,-7,-10,-14,-18,-23,-29,-20,-9,]),'yacc':([0,2,3,4,5,6,7,8,9,13,14,17,18,19,20,24,27,29,30,32,33,34,35,37,38,39,40,41,42,44,45,46,48,52,53,55,59,60,61,63,64,65,66,67,68,70,72,73,74,75,76,79,],[-5,7,-2,-3,-4,-20,-32,-36,-6,-19,-21,-31,-33,-38,-36,-20,-32,-27,-32,-34,-38,-35,-20,-20,-16,-19,-32,-24,-25,-28,-31,-37,-8,-15,-17,-22,-30,-20,-20,-20,-19,-32,-26,-31,-7,-10,-14,-18,-23,-29,-20,-9,]),'python':([0,2,3,4,5,6,7,8,9,13,14,17,18,19,20,24,27,29,30,32,33,34,35,37,38,39,40,41,42,44,45,46,48,52,53,55,59,60,61,63,64,65,66,67,68,70,72,73,74,75,76,79,],[-5,8,-2,-3,-4,-20,-32,-36,-6,-19,-21,-31,-33,-38,-36,-20,-32,-27,-32,-34,-38,-35,-20,-20,-16,-19,-32,-24,-25,-28,-31,-37,-8,-15,-17,-22,-30,-20,-20,-20,-19,-32,-26,-31,-7,-10,-14,-18,-23,-29,-20,-9,]),'$end':([0,1,2,3,4,5,6,7,8,9,13,14,17,18,19,20,24,27,29,30,32,33,34,35,37,38,39,40,41,42,44,45,46,48,52,53,55,59,60,61,63,64,65,66,67,68,70,72,73,74,75,76,79,],[-5,0,-1,-2,-3,-4,-20,-32,-36,-6,-19,-21,-31,-33,-38,-36,-20,-32,-27,-32,-34,-38,-35,-20,-20,-16,-19,-32,-24,-25,-28,-31,-37,-8,-15,-17,-22,-30,-20,-20,-20,-19,-32,-26,-31,-7,-10,-14,-18,-23,-29,-20,-9,]),'literals':([6,13,24,35,37,39,53,60,61,63,64,73,76,],[10,-19,10,10,10,-19,-17,10,10,10,-19,-18,10,]),'tokens':([6,13,24,35,37,39,53,60,61,63,64,73,76,],[11,-19,11,11,11,-19,-17,11,11,11,-19,-18,11,]),'ignor':([6,13,24,35,37,39,53,60,61,63,64,73,76,],[12,-19,12,12,12,-19,-17,12,12,12,-19,-18,12,]),'er':([6,13,24,35,37,39,53,60,61,63,64,73,76,],[13,-19,13,13,13,-19,-17,13,13,13,-19,-18,13,]),'precedence':([7,17,27,29,30,40,42,45,59,65,66,67,75,],[15,-31,15,-27,15,15,-25,-31,-30,15,-26,-31,-29,]),'initParserVal':([7,17,27,29,30,40,42,45,59,65,66,67,75,],[16,-31,16,-27,16,16,-25,-31,-30,16,-26,-31,-29,]),'grammar':([7,17,27,29,30,40,42,45,59,65,66,67,75,],[17,-31,17,-27,17,17,-25,-31,-30,17,-26,-31,-29,]),'funcPython':([8,20,],[20,20,]),'otherPython':([8,19,20,33,34,],[-36,33,-36,33,-35,]),'equal':([10,11,12,15,],[21,22,23,26,]),'expReg':([13,39,64,],[25,25,25,]),'parserVal':([16,28,57,],[28,28,28,]),'endParserVal':([16,28,57,],[29,29,29,]),'grammarDef':([17,45,67,],[31,31,31,]),'listliterals':([21,],[35,]),'oBracket':([22,],[36,]),'listignore':([23,],[37,]),'expDef':([25,],[39,]),'listprecedence':([26,],[40,]),'comment':([28,35,37,39,40,45,61,],[43,47,51,54,56,58,69,]),'funcGrammar':([31,],[45,]),'prime':([36,62,78,81,],[50,71,80,82,]),'commentEnd':([43,47,51,54,56,58,69,],[57,60,63,64,65,67,76,]),'cBracket':([49,71,77,82,83,],[61,-13,-11,-13,-12,]),'token':([50,80,],[62,81,]),'comma':([71,82,],[78,78,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Z':([0,],[1,]),'GRAMMAR':([0,],[2,]),'LEX':([2,],[3,]),'YACC':([2,],[4,]),'PYTHON':([2,],[5,]),'LEXES':([6,24,35,37,60,61,63,76,],[9,38,48,52,68,70,72,79,]),'YACCS':([7,27,30,40,65,],[14,41,44,55,74,]),'PYTHONS':([8,],[18,]),'LISTFUNCS':([8,20,],[19,34,]),'LISTEXPDEFS':([13,39,64,],[24,53,73,]),'LISTVALUES':([16,28,57,],[27,42,66,]),'LISTGRAM':([17,45,67,],[30,59,75,]),'LISTOTHER':([19,33,],[32,46,]),'LISTTOKENS':([36,],[49,]),'CONTLISTTOKENS':([71,82,],[77,83,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Z","S'",1,None,None,None),
  ('Z -> GRAMMAR','Z',1,'p_GRAMMATICA','TP2_yacc.py',155),
  ('GRAMMAR -> GRAMMAR LEX','GRAMMAR',2,'p_GRAMMAR_lex','TP2_yacc.py',169),
  ('GRAMMAR -> GRAMMAR YACC','GRAMMAR',2,'p_GRAMMAR_yacc','TP2_yacc.py',172),
  ('GRAMMAR -> GRAMMAR PYTHON','GRAMMAR',2,'p_GRAMMAR_python','TP2_yacc.py',175),
  ('GRAMMAR -> <empty>','GRAMMAR',0,'p_GRAMMAR_empty','TP2_yacc.py',178),
  ('LEX -> lex LEXES','LEX',2,'p_LEX','TP2_yacc.py',185),
  ('LEXES -> literals equal listliterals comment commentEnd LEXES','LEXES',6,'p_LEXES_LITERALSCOM','TP2_yacc.py',191),
  ('LEXES -> literals equal listliterals LEXES','LEXES',4,'p_LEXES_LITERALS','TP2_yacc.py',196),
  ('LEXES -> tokens equal oBracket LISTTOKENS cBracket comment commentEnd LEXES','LEXES',8,'p_LEXES_TOKENSCOM','TP2_yacc.py',203),
  ('LEXES -> tokens equal oBracket LISTTOKENS cBracket LEXES','LEXES',6,'p_LEXES_TOKENS','TP2_yacc.py',208),
  ('LISTTOKENS -> prime token prime CONTLISTTOKENS','LISTTOKENS',4,'p_LISTTOKENS','TP2_yacc.py',212),
  ('CONTLISTTOKENS -> comma prime token prime CONTLISTTOKENS','CONTLISTTOKENS',5,'p_CONTLISTTOKENS','TP2_yacc.py',216),
  ('CONTLISTTOKENS -> <empty>','CONTLISTTOKENS',0,'p_CONTLISTTOKENS_EMPTY','TP2_yacc.py',220),
  ('LEXES -> ignor equal listignore comment commentEnd LEXES','LEXES',6,'p_LEXES_IGNORECOM','TP2_yacc.py',226),
  ('LEXES -> ignor equal listignore LEXES','LEXES',4,'p_LEXES_IGNORE','TP2_yacc.py',230),
  ('LEXES -> er LISTEXPDEFS LEXES','LEXES',3,'p_LEXES_EXPDEFS','TP2_yacc.py',236),
  ('LISTEXPDEFS -> expReg expDef LISTEXPDEFS','LISTEXPDEFS',3,'p_LEXES_LISTEXPDEFS','TP2_yacc.py',239),
  ('LISTEXPDEFS -> expReg expDef comment commentEnd LISTEXPDEFS','LISTEXPDEFS',5,'p_LEXES_LISTEXPDEFSCOM','TP2_yacc.py',244),
  ('LISTEXPDEFS -> <empty>','LISTEXPDEFS',0,'p_LEXES_LISTEXPDEFS_empty','TP2_yacc.py',249),
  ('LEXES -> <empty>','LEXES',0,'p_LEXES_EMPTY','TP2_yacc.py',256),
  ('YACC -> yacc YACCS','YACC',2,'p_YACC','TP2_yacc.py',261),
  ('YACCS -> precedence equal listprecedence YACCS','YACCS',4,'p_YACCS_PREC','TP2_yacc.py',267),
  ('YACCS -> precedence equal listprecedence comment commentEnd YACCS','YACCS',6,'p_YACCS_PRECCOM','TP2_yacc.py',271),
  ('YACCS -> initParserVal LISTVALUES YACCS','YACCS',3,'p_YACCS_initParserVal','TP2_yacc.py',277),
  ('LISTVALUES -> parserVal LISTVALUES','LISTVALUES',2,'p_YACCS_valores','TP2_yacc.py',280),
  ('LISTVALUES -> parserVal comment commentEnd LISTVALUES','LISTVALUES',4,'p_YACCS_valoresCOM','TP2_yacc.py',284),
  ('LISTVALUES -> endParserVal','LISTVALUES',1,'p_YACCS_empty','TP2_yacc.py',288),
  ('YACCS -> grammar LISTGRAM YACCS','YACCS',3,'p_YACCS_GRAMMAR','TP2_yacc.py',293),
  ('LISTGRAM -> grammarDef funcGrammar comment commentEnd LISTGRAM','LISTGRAM',5,'p_YACCS_LISTGRAMCOM','TP2_yacc.py',296),
  ('LISTGRAM -> grammarDef funcGrammar LISTGRAM','LISTGRAM',3,'p_YACCS_LISTGRAM','TP2_yacc.py',301),
  ('LISTGRAM -> <empty>','LISTGRAM',0,'p_YACCS_LISTGRAM_empty','TP2_yacc.py',306),
  ('YACCS -> <empty>','YACCS',0,'p_YACC_EMPTY','TP2_yacc.py',310),
  ('PYTHON -> python PYTHONS','PYTHON',2,'p_PYTHON','TP2_yacc.py',315),
  ('PYTHONS -> LISTFUNCS LISTOTHER','PYTHONS',2,'p_PYTHONS','TP2_yacc.py',318),
  ('LISTFUNCS -> funcPython LISTFUNCS','LISTFUNCS',2,'p_PYTHON_ListFuncs','TP2_yacc.py',321),
  ('LISTFUNCS -> <empty>','LISTFUNCS',0,'p_PYTHON_ListFuncsEmpty','TP2_yacc.py',325),
  ('LISTOTHER -> otherPython LISTOTHER','LISTOTHER',2,'p_PYTHON_ListOther','TP2_yacc.py',328),
  ('LISTOTHER -> <empty>','LISTOTHER',0,'p_PYTHON_ListOtherEmpty','TP2_yacc.py',332),
]
