
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'cBracket colon comma equal func ignor lex listignore listliterals listprecedence literals oBracket precedence quote token tokens yaccZ : LEX YACCLEX : lex LEXESLEXES : literals equal listliterals LEXES LEXES : tokens equal oBracket LISTTOKENS cBracket LEXES LISTTOKENS : token CONTLISTTOKENSCONTLISTTOKENS : comma token CONTLISTTOKENS CONTLISTTOKENS : LEXES : ignor equal listignore LEXESLEXES : LEX : YACC : yacc YACCSYACCS : precedence equal oBracket LISTPRECE cBracket YACCSLISTPRECE : listprecedence comma LISTPRECELISTPRECE : YACCS : '
    
_lr_action_items = {'lex':([0,],[3,]),'yacc':([0,2,3,6,16,18,20,23,26,31,],[-10,5,-9,-2,-9,-9,-3,-8,-9,-4,]),'$end':([1,4,5,10,29,33,],[0,-1,-15,-11,-15,-12,]),'literals':([3,16,18,26,],[7,7,7,7,]),'tokens':([3,16,18,26,],[8,8,8,8,]),'ignor':([3,16,18,26,],[9,9,9,9,]),'precedence':([5,29,],[11,11,]),'equal':([7,8,9,11,],[12,13,14,15,]),'listliterals':([12,],[16,]),'oBracket':([13,15,],[17,19,]),'listignore':([14,],[18,]),'token':([17,28,],[22,32,]),'listprecedence':([19,30,],[25,25,]),'cBracket':([19,21,22,24,27,30,32,34,35,],[-14,26,-7,29,-5,-14,-7,-13,-6,]),'comma':([22,25,32,],[28,30,28,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Z':([0,],[1,]),'LEX':([0,],[2,]),'YACC':([2,],[4,]),'LEXES':([3,16,18,26,],[6,20,23,31,]),'YACCS':([5,29,],[10,33,]),'LISTTOKENS':([17,],[21,]),'LISTPRECE':([19,30,],[24,34,]),'CONTLISTTOKENS':([22,32,],[27,35,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Z","S'",1,None,None,None),
  ('Z -> LEX YACC','Z',2,'p_GRAMMAR','TP2_yacc.py',8),
  ('LEX -> lex LEXES','LEX',2,'p_LEX','TP2_yacc.py',15),
  ('LEXES -> literals equal listliterals LEXES','LEXES',4,'p_LEXES_LITERALS','TP2_yacc.py',21),
  ('LEXES -> tokens equal oBracket LISTTOKENS cBracket LEXES','LEXES',6,'p_LEXES_TOKENS','TP2_yacc.py',27),
  ('LISTTOKENS -> token CONTLISTTOKENS','LISTTOKENS',2,'p_LISTTOKENS','TP2_yacc.py',31),
  ('CONTLISTTOKENS -> comma token CONTLISTTOKENS','CONTLISTTOKENS',3,'p_CONTLISTTOKENS','TP2_yacc.py',35),
  ('CONTLISTTOKENS -> <empty>','CONTLISTTOKENS',0,'p_CONTLISTTOKENS_EMPTY','TP2_yacc.py',39),
  ('LEXES -> ignor equal listignore LEXES','LEXES',4,'p_LEXES_IGNORE','TP2_yacc.py',45),
  ('LEXES -> <empty>','LEXES',0,'p_LEXES_EMPTY','TP2_yacc.py',52),
  ('LEX -> <empty>','LEX',0,'p_LEX_EMPTY','TP2_yacc.py',55),
  ('YACC -> yacc YACCS','YACC',2,'p_YACC','TP2_yacc.py',60),
  ('YACCS -> precedence equal oBracket LISTPRECE cBracket YACCS','YACCS',6,'p_YACCS_PREC','TP2_yacc.py',66),
  ('LISTPRECE -> listprecedence comma LISTPRECE','LISTPRECE',3,'p_LISTPRECE','TP2_yacc.py',70),
  ('LISTPRECE -> <empty>','LISTPRECE',0,'p_LISTPRECE_EMPTY','TP2_yacc.py',73),
  ('YACCS -> <empty>','YACCS',0,'p_YACC_EMPTY','TP2_yacc.py',80),
]
